# Project Title

Simple Router with Node.js, Prisma, and PostgreSQL

## Description

This project is a simple router built with Node.js, using Prisma to interact with a PostgreSQL database. The router allows you to create, read, update, and delete books through various API endpoints. It's a minimalistic implementation to handle HTTP requests and route them to the appropriate controllers to manage the book data.

## Requirements

- Node.js [Version]
- PostgreSQL [Version]
- Prisma [Version]

## Installation

1. Clone the repository:

```bash
git clone https://github.com/amounach42/repository.git
cd repository
```

2. Install dependencies:

```bash
npm install
```
3. Generate Prisma Client

```bash
npx prisma generate
```

4. Set up the database:

- Make sure you have PostgreSQL installed and running.
- Run Prisma migrations to create the necessary tables:

```bash
npx prisma migrate
```

## Configuration

- If required, update the Prisma database connection configuration in the `prisma/client` section of `models/bookModel.js` file to match your PostgreSQL database settings.

## Usage

Start the server:

```bash
npm start
```

Build and run the Docker containers:

```bash
docker compose up --build -d
```

The server will be running at http://localhost:3001.

## API Endpoints

### Get All Books

- **URL:** `/api/books`
- **Method:** `GET`
- **Description:** Get a list of all books.
- **Response:** JSON array containing multiple book objects.

### Get a Specific Book

- **URL:** `/api/books/:id`
- **Method:** `GET`
- **Description:** Get a specific book by its ID.
- **Response:** JSON object representing the book details.

### Create a Book

- **URL:** `/api/books`
- **Method:** `POST`
- **Description:** Create a new book.
- **Request:** JSON object containing the book details to be created.
- **Response:** JSON object representing the newly created book.

### Update a Book

- **URL:** `/api/books/:id`
- **Method:** `PUT`
- **Description:** Update an existing book by its ID.
- **Request:** JSON object containing the book details to be updated.
- **Response:** JSON object representing the updated book.

### Delete a Book

- **URL:** `/api/books/:id`
- **Method:** `DELETE`
- **Description:** Delete a specific book by its ID.
- **Response:** JSON object confirming the successful deletion.
